// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IssueTracker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoryPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("IssueIssueTag", b =>
                {
                    b.Property<int>("IssuesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IssuesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("IssueIssueTag");
                });

            modelBuilder.Entity("IssueTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IssueTags");

                    b.HasData(
                        new
                        {
                            Id = -100,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2310),
                            Description = "Indicates an unexpected problem or unintended behavior",
                            IsDeleted = false,
                            Label = "bug",
                            Slug = "bug",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2340)
                        },
                        new
                        {
                            Id = -101,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2360),
                            Description = "Indicates a need for improvements or additions to documentation",
                            IsDeleted = false,
                            Label = "documentation",
                            Slug = "documentation",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2360)
                        },
                        new
                        {
                            Id = -102,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2380),
                            Description = "Indicates similar issues, pull requests, or discussions",
                            IsDeleted = false,
                            Label = "duplicate",
                            Slug = "duplicate",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2380)
                        },
                        new
                        {
                            Id = -103,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2390),
                            Description = "Indicates new feature requests",
                            IsDeleted = false,
                            Label = "enhancement",
                            Slug = "enhancement",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2390)
                        },
                        new
                        {
                            Id = -104,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2400),
                            Description = "Indicates a good issue for first-time contributors",
                            IsDeleted = false,
                            Label = "good first issue",
                            Slug = "good-first-issue",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2400)
                        },
                        new
                        {
                            Id = -105,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2410),
                            Description = "Indicates that a maintainer wants help on an issue or pull request",
                            IsDeleted = false,
                            Label = "help wanted",
                            Slug = "help-wanted",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2410)
                        },
                        new
                        {
                            Id = -106,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2420),
                            Description = "Indicates that an issue, pull request, or discussion is no longer relevant",
                            IsDeleted = false,
                            Label = "invalid",
                            Slug = "invalid",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2420)
                        },
                        new
                        {
                            Id = -107,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2430),
                            Description = "Indicates that an issue, pull request, or discussion needs more information",
                            IsDeleted = false,
                            Label = "question",
                            Slug = "question",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2430)
                        },
                        new
                        {
                            Id = -108,
                            Color = "secondary",
                            CreatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2440),
                            Description = "Indicates that work won't continue on an issue, pull request, or discussion",
                            IsDeleted = false,
                            Label = "wontfix",
                            Slug = "wontfix",
                            UpdatedDate = new DateTime(2023, 10, 3, 14, 35, 35, 652, DateTimeKind.Local).AddTicks(2440)
                        });
                });

            modelBuilder.Entity("IssueUser", b =>
                {
                    b.Property<int>("AssignedIssuesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssigneesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssignedIssuesId", "AssigneesId");

                    b.HasIndex("AssigneesId");

                    b.ToTable("IssueUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.HasOne("Issue", null)
                        .WithMany("Comments")
                        .HasForeignKey("IssueId");

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Issue", b =>
                {
                    b.HasOne("User", "Author")
                        .WithMany("AuthoredIssues")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IssueIssueTag", b =>
                {
                    b.HasOne("Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssueTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueUser", b =>
                {
                    b.HasOne("Issue", null)
                        .WithMany()
                        .HasForeignKey("AssignedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("AssigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Issue", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("AuthoredIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
